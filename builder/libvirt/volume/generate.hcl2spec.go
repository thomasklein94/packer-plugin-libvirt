// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package volume

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatBackingStoreVolumeSource is an auto-generated flat version of BackingStoreVolumeSource.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatBackingStoreVolumeSource struct {
	Pool   *string `mapstructure:"pool" required:"false" cty:"pool" hcl:"pool"`
	Volume *string `mapstructure:"volume" required:"false" cty:"volume" hcl:"volume"`
	Path   *string `mapstructure:"path" required:"false" cty:"path" hcl:"path"`
}

// FlatMapstructure returns a new FlatBackingStoreVolumeSource.
// FlatBackingStoreVolumeSource is an auto-generated flat version of BackingStoreVolumeSource.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*BackingStoreVolumeSource) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatBackingStoreVolumeSource)
}

// HCL2Spec returns the hcl spec of a BackingStoreVolumeSource.
// This spec is used by HCL to read the fields of BackingStoreVolumeSource.
// The decoded values from this spec will then be applied to a FlatBackingStoreVolumeSource.
func (*FlatBackingStoreVolumeSource) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"pool":   &hcldec.AttrSpec{Name: "pool", Type: cty.String, Required: false},
		"volume": &hcldec.AttrSpec{Name: "volume", Type: cty.String, Required: false},
		"path":   &hcldec.AttrSpec{Name: "path", Type: cty.String, Required: false},
	}
	return s
}

// FlatCloningVolumeSource is an auto-generated flat version of CloningVolumeSource.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatCloningVolumeSource struct {
	Pool   *string `mapstucture:"pool" required:"false" cty:"pool" hcl:"pool"`
	Volume *string `mapstructure:"volume" required:"false" cty:"volume" hcl:"volume"`
}

// FlatMapstructure returns a new FlatCloningVolumeSource.
// FlatCloningVolumeSource is an auto-generated flat version of CloningVolumeSource.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*CloningVolumeSource) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatCloningVolumeSource)
}

// HCL2Spec returns the hcl spec of a CloningVolumeSource.
// This spec is used by HCL to read the fields of CloningVolumeSource.
// The decoded values from this spec will then be applied to a FlatCloningVolumeSource.
func (*FlatCloningVolumeSource) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"pool":   &hcldec.AttrSpec{Name: "pool", Type: cty.String, Required: false},
		"volume": &hcldec.AttrSpec{Name: "volume", Type: cty.String, Required: false},
	}
	return s
}

// FlatCloudInitSource is an auto-generated flat version of CloudInitSource.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatCloudInitSource struct {
	MetaData      *string `mapstructure:"meta_data" cty:"meta_data" hcl:"meta_data"`
	UserData      *string `mapstructure:"user_data" cty:"user_data" hcl:"user_data"`
	NetworkConfig *string `mapstructure:"network_config" cty:"network_config" hcl:"network_config"`
}

// FlatMapstructure returns a new FlatCloudInitSource.
// FlatCloudInitSource is an auto-generated flat version of CloudInitSource.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*CloudInitSource) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatCloudInitSource)
}

// HCL2Spec returns the hcl spec of a CloudInitSource.
// This spec is used by HCL to read the fields of CloudInitSource.
// The decoded values from this spec will then be applied to a FlatCloudInitSource.
func (*FlatCloudInitSource) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"meta_data":      &hcldec.AttrSpec{Name: "meta_data", Type: cty.String, Required: false},
		"user_data":      &hcldec.AttrSpec{Name: "user_data", Type: cty.String, Required: false},
		"network_config": &hcldec.AttrSpec{Name: "network_config", Type: cty.String, Required: false},
	}
	return s
}

// FlatExternalVolumeSource is an auto-generated flat version of ExternalVolumeSource.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatExternalVolumeSource struct {
	Checksum *string  `mapstructure:"checksum" cty:"checksum" hcl:"checksum"`
	Urls     []string `mapstructure:"urls" cty:"urls" hcl:"urls"`
}

// FlatMapstructure returns a new FlatExternalVolumeSource.
// FlatExternalVolumeSource is an auto-generated flat version of ExternalVolumeSource.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*ExternalVolumeSource) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatExternalVolumeSource)
}

// HCL2Spec returns the hcl spec of a ExternalVolumeSource.
// This spec is used by HCL to read the fields of ExternalVolumeSource.
// The decoded values from this spec will then be applied to a FlatExternalVolumeSource.
func (*FlatExternalVolumeSource) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"checksum": &hcldec.AttrSpec{Name: "checksum", Type: cty.String, Required: false},
		"urls":     &hcldec.AttrSpec{Name: "urls", Type: cty.List(cty.String), Required: false},
	}
	return s
}

// FlatFilesVolumeSource is an auto-generated flat version of FilesVolumeSource.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatFilesVolumeSource struct {
	Files    []string          `mapstructure:"files" cty:"files" hcl:"files"`
	Contents map[string]string `mapstructure:"contents" cty:"contents" hcl:"contents"`
	Label    *string           `mapstructure:"label" cty:"label" hcl:"label"`
}

// FlatMapstructure returns a new FlatFilesVolumeSource.
// FlatFilesVolumeSource is an auto-generated flat version of FilesVolumeSource.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*FilesVolumeSource) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatFilesVolumeSource)
}

// HCL2Spec returns the hcl spec of a FilesVolumeSource.
// This spec is used by HCL to read the fields of FilesVolumeSource.
// The decoded values from this spec will then be applied to a FlatFilesVolumeSource.
func (*FlatFilesVolumeSource) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"files":    &hcldec.AttrSpec{Name: "files", Type: cty.List(cty.String), Required: false},
		"contents": &hcldec.AttrSpec{Name: "contents", Type: cty.Map(cty.String), Required: false},
		"label":    &hcldec.AttrSpec{Name: "label", Type: cty.String, Required: false},
	}
	return s
}

// FlatVolume is an auto-generated flat version of Volume.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatVolume struct {
	Pool      *string           `mapstructure:"pool" required:"false" cty:"pool" hcl:"pool"`
	Name      *string           `mapstructure:"name" required:"false" cty:"name" hcl:"name"`
	Source    *FlatVolumeSource `mapstructure:"source" required:"false" cty:"source" hcl:"source"`
	Size      *string           `mapstructure:"size" required:"false" cty:"size" hcl:"size"`
	Capacity  *string           `mapstructure:"capacity" required:"false" cty:"capacity" hcl:"capacity"`
	ReadOnly  *bool             `mapstructure:"readonly" required:"false" cty:"readonly" hcl:"readonly"`
	TargetDev *string           `mapstructure:"target_dev" required:"false" cty:"target_dev" hcl:"target_dev"`
	Bus       *string           `mapstructure:"bus" required:"false" cty:"bus" hcl:"bus"`
	Alias     *string           `mapstructure:"alias" required:"false" cty:"alias" hcl:"alias"`
	Format    *string           `mapstructure:"format" required:"false" cty:"format" hcl:"format"`
	Device    *string           `mapstructure:"device" required:"false" cty:"device" hcl:"device"`
}

// FlatMapstructure returns a new FlatVolume.
// FlatVolume is an auto-generated flat version of Volume.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Volume) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatVolume)
}

// HCL2Spec returns the hcl spec of a Volume.
// This spec is used by HCL to read the fields of Volume.
// The decoded values from this spec will then be applied to a FlatVolume.
func (*FlatVolume) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"pool":       &hcldec.AttrSpec{Name: "pool", Type: cty.String, Required: false},
		"name":       &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"source":     &hcldec.BlockSpec{TypeName: "source", Nested: hcldec.ObjectSpec((*FlatVolumeSource)(nil).HCL2Spec())},
		"size":       &hcldec.AttrSpec{Name: "size", Type: cty.String, Required: false},
		"capacity":   &hcldec.AttrSpec{Name: "capacity", Type: cty.String, Required: false},
		"readonly":   &hcldec.AttrSpec{Name: "readonly", Type: cty.Bool, Required: false},
		"target_dev": &hcldec.AttrSpec{Name: "target_dev", Type: cty.String, Required: false},
		"bus":        &hcldec.AttrSpec{Name: "bus", Type: cty.String, Required: false},
		"alias":      &hcldec.AttrSpec{Name: "alias", Type: cty.String, Required: false},
		"format":     &hcldec.AttrSpec{Name: "format", Type: cty.String, Required: false},
		"device":     &hcldec.AttrSpec{Name: "device", Type: cty.String, Required: false},
	}
	return s
}

// FlatVolumeSource is an auto-generated flat version of VolumeSource.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatVolumeSource struct {
	Type          *string           `mapstructure:"type" required:"true" cty:"type" hcl:"type"`
	Checksum      *string           `mapstructure:"checksum" cty:"checksum" hcl:"checksum"`
	Urls          []string          `mapstructure:"urls" cty:"urls" hcl:"urls"`
	MetaData      *string           `mapstructure:"meta_data" cty:"meta_data" hcl:"meta_data"`
	UserData      *string           `mapstructure:"user_data" cty:"user_data" hcl:"user_data"`
	NetworkConfig *string           `mapstructure:"network_config" cty:"network_config" hcl:"network_config"`
	Pool          *string           `mapstructure:"pool" required:"false" cty:"pool" hcl:"pool"`
	Volume        *string           `mapstructure:"volume" required:"false" cty:"volume" hcl:"volume"`
	Path          *string           `mapstructure:"path" required:"false" cty:"path" hcl:"path"`
	Files         []string          `mapstructure:"files" cty:"files" hcl:"files"`
	Contents      map[string]string `mapstructure:"contents" cty:"contents" hcl:"contents"`
	Label         *string           `mapstructure:"label" cty:"label" hcl:"label"`
}

// FlatMapstructure returns a new FlatVolumeSource.
// FlatVolumeSource is an auto-generated flat version of VolumeSource.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*VolumeSource) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatVolumeSource)
}

// HCL2Spec returns the hcl spec of a VolumeSource.
// This spec is used by HCL to read the fields of VolumeSource.
// The decoded values from this spec will then be applied to a FlatVolumeSource.
func (*FlatVolumeSource) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"type":           &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"checksum":       &hcldec.AttrSpec{Name: "checksum", Type: cty.String, Required: false},
		"urls":           &hcldec.AttrSpec{Name: "urls", Type: cty.List(cty.String), Required: false},
		"meta_data":      &hcldec.AttrSpec{Name: "meta_data", Type: cty.String, Required: false},
		"user_data":      &hcldec.AttrSpec{Name: "user_data", Type: cty.String, Required: false},
		"network_config": &hcldec.AttrSpec{Name: "network_config", Type: cty.String, Required: false},
		"pool":           &hcldec.AttrSpec{Name: "pool", Type: cty.String, Required: false},
		"volume":         &hcldec.AttrSpec{Name: "volume", Type: cty.String, Required: false},
		"path":           &hcldec.AttrSpec{Name: "path", Type: cty.String, Required: false},
		"files":          &hcldec.AttrSpec{Name: "files", Type: cty.List(cty.String), Required: false},
		"contents":       &hcldec.AttrSpec{Name: "contents", Type: cty.Map(cty.String), Required: false},
		"label":          &hcldec.AttrSpec{Name: "label", Type: cty.String, Required: false},
	}
	return s
}
